generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  addresses Address[]
  Order     Order[]

  @@map("users")
}

model Category {
  id          Int          @id @default(autoincrement())
  uuid        String       @unique @default(uuid())
  description String
  slug        String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  Restaurant  Restaurant[]

  @@map("categories")
}

model Address {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  street    String
  city      String
  district  String
  state     String
  number    Int?
  zipcode   String?
  latitude  Decimal
  longitude Decimal
  primary   Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  Order     Order[]

  @@map("addresses")
}

model Deliveryman {
  id             Int       @id @default(autoincrement())
  uuid           String    @unique @default(uuid())
  name           String
  driversLicense String    @unique @map("drivers_license")
  password       String
  company        String
  phone          String
  street         String
  city           String
  district       String
  state          String
  number         Int?
  zipcode        String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  Order          Order[]

  @@map("deliverymen")
}

model Restaurant {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map("category_id")

  name        String
  description String
  rate        Float?
  street      String
  city        String
  district    String
  state       String
  number      Int?
  zipcode     String?
  latitude    Decimal
  longitude   Decimal
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  Order       Order[]

  @@map("restaurants")
}

enum OrderPaymentEnum {
  PAID
  NOT_PAID
}

enum OrderStatusEnum {
  CREATED
  ACCEPTED
  COLLECTED
  DELIVERED
  CANCELED
}

model Order {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int        @map("restaurant_id")

  address   Address @relation(fields: [addressId], references: [id])
  addressId Int     @map("address_id")

  deliveryman   Deliveryman? @relation(fields: [deliverymanId], references: [id])
  deliverymanId Int?         @map("deliveryman_id")

  total        Float
  rate         Float?
  orderPayment OrderPaymentEnum @default(NOT_PAID) @map("payment_status")
  orderStatus  OrderStatusEnum  @default(CREATED) @map("order_status")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime?        @updatedAt @map("updated_at")

  @@map("orders")
}
